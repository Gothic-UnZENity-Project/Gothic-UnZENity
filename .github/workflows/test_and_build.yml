name: Gothic-UnZENity Build Jobs

on:
  pull_request
#    branches:
#      - main
#    types: [labeled]

# We will reuse it once we define release pipeline
#  push:
#    branches:
#      - main
#    paths-ignore:
#      - 'docs/**'
#      - "README.md"


jobs:
  #########
  # TESTS #
  #########

  Build_with_HVR:
    name: Build with HVR included
    runs-on: self-hosted
    strategy:
      fail-fast: true
      matrix:
        include:
          - targetPlatform: StandaloneWindows64
            targetDevice: Windows64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check out HVR .unitypackage
        uses: actions/checkout@v4
        with:
          repository: Gothic-UnZENity-Project/asset-dependencies
          ref: main
          path: HVR/v2.9.2
      
      - name: check
        run: ls -lah
          


  
  Build_test_without_HVR:
    if: false
    name: Test if game can be build without HVR
    runs-on: self-hosted
    strategy:
      fail-fast: true
      matrix:
        include:
          - targetPlatform: StandaloneWindows64
            targetDevice: Windows64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Remove PlayerSetting's Scripting Define Symbol
        run: sed -i 's/GUZ_HVR_INSTALLED/GUZ_PLACEHOLDER/g' ProjectSettings/ProjectSettings.asset
      
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          allowDirtyBuild: true
          buildMethod: GUZ.VR.Editor.VRBuilderActions.Perform${{ matrix.targetDevice }}Build
  
  # Unit_Tests:
  #   if: ${{ github.event.label.name == 'Pipeline' }}
  #   name: Test in ${{ matrix.testMode }}
  #   runs-on: self-hosted
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       testMode:
  #         - playmode
  #         - editmode
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         lfs: true
  #         fetch-depth: 0
  #         clean: true
  #     - uses: actions/cache@v3
  #       with:
  #         path: ${{ matrix.projectPath }}/Library
  #         key: Library-${{ matrix.projectPath }}
  #         restore-keys: |
  #           Library-
  #     - uses: game-ci/unity-test-runner@v3
  #       id: tests
  #       env:
  #         UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #       with:
  #         testMode: ${{ matrix.testMode }}
  #         artifactsPath: ${{ matrix.testMode }}-artifacts
  #         githubToken: ${{ secrets.GITHUB_TOKEN }}
  #         checkName: ${{ matrix.testMode }} Test Results
  #         coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'
  #     - uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: Test results for ${{ matrix.testMode }}
  #         path: ${{ steps.tests.outputs.artifactsPath }}
  #     - uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: Coverage results for ${{ matrix.testMode }}
  #         path: ${{ steps.tests.outputs.coveragePath }}

  #########
  # BUILD #
  #########

  buildForAllPlatforms:
    if: ${{ github.event.label.name == 'Pipeline' }}
    name: Build GothicVR for ${{ matrix.targetDevice }}
    #needs: Unit_Tests
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        include:
          - targetPlatform: StandaloneWindows64
            targetDevice: Windows64
          - targetPlatform: Android
            targetDevice: Pico
          - targetPlatform: Android
            targetDevice: Quest
    steps:
      # Checkout without LFS
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          #lfs: true
          fetch-depth: 0
          clean: true

      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache
      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          allowDirtyBuild: true
          buildMethod: GUZ.VR.Editor.VRBuilderActions.Perform${{ matrix.targetDevice }}Build

      - uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetDevice }}
          path: build/${{ matrix.targetDevice }}
          expire-in: 2 days
